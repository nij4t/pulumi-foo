// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class SynteticMonitoringCheck extends pulumi.CustomResource {
    /**
     * Get an existing SynteticMonitoringCheck resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SynteticMonitoringCheckState, opts?: pulumi.CustomResourceOptions): SynteticMonitoringCheck {
        return new SynteticMonitoringCheck(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'grafana:/synteticMonitoringCheck:SynteticMonitoringCheck';

    /**
     * Returns true if the given object is an instance of SynteticMonitoringCheck.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SynteticMonitoringCheck {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SynteticMonitoringCheck.__pulumiType;
    }

    /**
     * Can be set to `none`, `low`, `medium`, or `high` to correspond to the check [alert
     * levels](https://grafana.com/docs/grafana-cloud/synthetic-monitoring/synthetic-monitoring-alerting/).
     */
    public readonly alertSensitivity!: pulumi.Output<string | undefined>;
    /**
     * Metrics are reduced by default. Set this to `false` if you'd like to publish all metrics. We maintain a [full list of
     * metrics](https://github.com/grafana/synthetic-monitoring-agent/tree/main/internal/scraper/testdata) collected for each.
     */
    public readonly basicMetricsOnly!: pulumi.Output<boolean | undefined>;
    /**
     * Whether to enable the check.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * How often the check runs in milliseconds (the value is not truly a "frequency" but a "period"). The minimum acceptable
     * value is 1 second (1000 ms), and the maximum is 120 seconds (120000 ms).
     */
    public readonly frequency!: pulumi.Output<number | undefined>;
    /**
     * The ID of the check.
     */
    public /*out*/ readonly id!: pulumi.Output<string>;
    /**
     * Name used for job label.
     */
    public readonly job!: pulumi.Output<string>;
    /**
     * Custom labels to be included with collected metrics and logs. The maximum number of labels that can be specified per
     * check is 5. These are applied, along with the probe-specific labels, to the outgoing metrics. The names and values of
     * the labels cannot be empty, and the maximum length is 32 bytes.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * List of probe location IDs where this target will be checked from.
     */
    public readonly probes!: pulumi.Output<number[]>;
    /**
     * Check settings.
     */
    public readonly settings!: pulumi.Output<outputs.SynteticMonitoringCheckSettings>;
    /**
     * Hostname to ping.
     */
    public readonly target!: pulumi.Output<string>;
    /**
     * The tenant ID of the check.
     */
    public /*out*/ readonly tenantId!: pulumi.Output<number>;
    /**
     * Specifies the maximum running time for the check in milliseconds. The minimum acceptable value is 1 second (1000 ms),
     * and the maximum 10 seconds (10000 ms).
     */
    public readonly timeout!: pulumi.Output<number | undefined>;

    /**
     * Create a SynteticMonitoringCheck resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SynteticMonitoringCheckArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SynteticMonitoringCheckArgs | SynteticMonitoringCheckState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SynteticMonitoringCheckState | undefined;
            resourceInputs["alertSensitivity"] = state ? state.alertSensitivity : undefined;
            resourceInputs["basicMetricsOnly"] = state ? state.basicMetricsOnly : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["frequency"] = state ? state.frequency : undefined;
            resourceInputs["id"] = state ? state.id : undefined;
            resourceInputs["job"] = state ? state.job : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["probes"] = state ? state.probes : undefined;
            resourceInputs["settings"] = state ? state.settings : undefined;
            resourceInputs["target"] = state ? state.target : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
        } else {
            const args = argsOrState as SynteticMonitoringCheckArgs | undefined;
            if ((!args || args.job === undefined) && !opts.urn) {
                throw new Error("Missing required property 'job'");
            }
            if ((!args || args.probes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'probes'");
            }
            if ((!args || args.settings === undefined) && !opts.urn) {
                throw new Error("Missing required property 'settings'");
            }
            if ((!args || args.target === undefined) && !opts.urn) {
                throw new Error("Missing required property 'target'");
            }
            resourceInputs["alertSensitivity"] = args ? args.alertSensitivity : undefined;
            resourceInputs["basicMetricsOnly"] = args ? args.basicMetricsOnly : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["frequency"] = args ? args.frequency : undefined;
            resourceInputs["job"] = args ? args.job : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["probes"] = args ? args.probes : undefined;
            resourceInputs["settings"] = args ? args.settings : undefined;
            resourceInputs["target"] = args ? args.target : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["id"] = undefined /*out*/;
            resourceInputs["tenantId"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(SynteticMonitoringCheck.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SynteticMonitoringCheck resources.
 */
export interface SynteticMonitoringCheckState {
    /**
     * Can be set to `none`, `low`, `medium`, or `high` to correspond to the check [alert
     * levels](https://grafana.com/docs/grafana-cloud/synthetic-monitoring/synthetic-monitoring-alerting/).
     */
    alertSensitivity?: pulumi.Input<string>;
    /**
     * Metrics are reduced by default. Set this to `false` if you'd like to publish all metrics. We maintain a [full list of
     * metrics](https://github.com/grafana/synthetic-monitoring-agent/tree/main/internal/scraper/testdata) collected for each.
     */
    basicMetricsOnly?: pulumi.Input<boolean>;
    /**
     * Whether to enable the check.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * How often the check runs in milliseconds (the value is not truly a "frequency" but a "period"). The minimum acceptable
     * value is 1 second (1000 ms), and the maximum is 120 seconds (120000 ms).
     */
    frequency?: pulumi.Input<number>;
    /**
     * The ID of the check.
     */
    id?: pulumi.Input<string>;
    /**
     * Name used for job label.
     */
    job?: pulumi.Input<string>;
    /**
     * Custom labels to be included with collected metrics and logs. The maximum number of labels that can be specified per
     * check is 5. These are applied, along with the probe-specific labels, to the outgoing metrics. The names and values of
     * the labels cannot be empty, and the maximum length is 32 bytes.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of probe location IDs where this target will be checked from.
     */
    probes?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Check settings.
     */
    settings?: pulumi.Input<inputs.SynteticMonitoringCheckSettings>;
    /**
     * Hostname to ping.
     */
    target?: pulumi.Input<string>;
    /**
     * The tenant ID of the check.
     */
    tenantId?: pulumi.Input<number>;
    /**
     * Specifies the maximum running time for the check in milliseconds. The minimum acceptable value is 1 second (1000 ms),
     * and the maximum 10 seconds (10000 ms).
     */
    timeout?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SynteticMonitoringCheck resource.
 */
export interface SynteticMonitoringCheckArgs {
    /**
     * Can be set to `none`, `low`, `medium`, or `high` to correspond to the check [alert
     * levels](https://grafana.com/docs/grafana-cloud/synthetic-monitoring/synthetic-monitoring-alerting/).
     */
    alertSensitivity?: pulumi.Input<string>;
    /**
     * Metrics are reduced by default. Set this to `false` if you'd like to publish all metrics. We maintain a [full list of
     * metrics](https://github.com/grafana/synthetic-monitoring-agent/tree/main/internal/scraper/testdata) collected for each.
     */
    basicMetricsOnly?: pulumi.Input<boolean>;
    /**
     * Whether to enable the check.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * How often the check runs in milliseconds (the value is not truly a "frequency" but a "period"). The minimum acceptable
     * value is 1 second (1000 ms), and the maximum is 120 seconds (120000 ms).
     */
    frequency?: pulumi.Input<number>;
    /**
     * Name used for job label.
     */
    job: pulumi.Input<string>;
    /**
     * Custom labels to be included with collected metrics and logs. The maximum number of labels that can be specified per
     * check is 5. These are applied, along with the probe-specific labels, to the outgoing metrics. The names and values of
     * the labels cannot be empty, and the maximum length is 32 bytes.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of probe location IDs where this target will be checked from.
     */
    probes: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Check settings.
     */
    settings: pulumi.Input<inputs.SynteticMonitoringCheckSettings>;
    /**
     * Hostname to ping.
     */
    target: pulumi.Input<string>;
    /**
     * Specifies the maximum running time for the check in milliseconds. The minimum acceptable value is 1 second (1000 ms),
     * and the maximum 10 seconds (10000 ms).
     */
    timeout?: pulumi.Input<number>;
}
