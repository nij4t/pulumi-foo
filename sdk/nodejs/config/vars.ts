// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

declare var exports: any;
const __config = new pulumi.Config("grafana");

/**
 * API token or basic auth username:password. May alternatively be set via the `GRAFANA_AUTH` environment variable.
 */
export declare const auth: string | undefined;
Object.defineProperty(exports, "auth", {
    get() {
        return __config.get("auth") ?? utilities.getEnv("GRAFANA_AUTH");
    },
    enumerable: true,
});

/**
 * Certificate CA bundle to use to verify the Grafana server's certificate. May alternatively be set via the
 * `GRAFANA_CA_CERT` environment variable.
 */
export declare const caCert: string | undefined;
Object.defineProperty(exports, "caCert", {
    get() {
        return __config.get("caCert");
    },
    enumerable: true,
});

/**
 * Skip TLS certificate verification. May alternatively be set via the `GRAFANA_INSECURE_SKIP_VERIFY` environment variable.
 */
export declare const insecureSkipVerify: boolean | undefined;
Object.defineProperty(exports, "insecureSkipVerify", {
    get() {
        return __config.getObject<boolean>("insecureSkipVerify");
    },
    enumerable: true,
});

/**
 * The organization id to operate on within grafana. May alternatively be set via the `GRAFANA_ORG_ID` environment
 * variable.
 */
export declare const orgId: number | undefined;
Object.defineProperty(exports, "orgId", {
    get() {
        return __config.getObject<number>("orgId");
    },
    enumerable: true,
});

/**
 * The amount of retries to use for Grafana API calls. May alternatively be set via the `GRAFANA_RETRIES` environment
 * variable.
 */
export declare const retries: number | undefined;
Object.defineProperty(exports, "retries", {
    get() {
        return __config.getObject<number>("retries");
    },
    enumerable: true,
});

/**
 * A Synthetic Monitoring access token. May alternatively be set via the `GRAFANA_SM_ACCESS_TOKEN` environment variable.
 */
export declare const smAccessToken: string | undefined;
Object.defineProperty(exports, "smAccessToken", {
    get() {
        return __config.get("smAccessToken");
    },
    enumerable: true,
});

/**
 * Synthetic monitoring backend address. May alternatively be set via the `GRAFANA_SM_URL` environment variable.
 */
export declare const smUrl: string | undefined;
Object.defineProperty(exports, "smUrl", {
    get() {
        return __config.get("smUrl");
    },
    enumerable: true,
});

/**
 * Client TLS certificate file to use to authenticate to the Grafana server. May alternatively be set via the
 * `GRAFANA_TLS_CERT` environment variable.
 */
export declare const tlsCert: string | undefined;
Object.defineProperty(exports, "tlsCert", {
    get() {
        return __config.get("tlsCert");
    },
    enumerable: true,
});

/**
 * Client TLS key file to use to authenticate to the Grafana server. May alternatively be set via the `GRAFANA_TLS_KEY`
 * environment variable.
 */
export declare const tlsKey: string | undefined;
Object.defineProperty(exports, "tlsKey", {
    get() {
        return __config.get("tlsKey");
    },
    enumerable: true,
});

/**
 * The root URL of a Grafana server. May alternatively be set via the `GRAFANA_URL` environment variable.
 */
export declare const url: string | undefined;
Object.defineProperty(exports, "url", {
    get() {
        return __config.get("url") ?? utilities.getEnv("GRAFANA_URL");
    },
    enumerable: true,
});

