// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The provider type for the grafana package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'grafana';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Provider.__pulumiType;
    }

    /**
     * API token or basic auth username:password. May alternatively be set via the `GRAFANA_AUTH` environment variable.
     */
    public readonly auth!: pulumi.Output<string | undefined>;
    /**
     * Certificate CA bundle to use to verify the Grafana server's certificate. May alternatively be set via the
     * `GRAFANA_CA_CERT` environment variable.
     */
    public readonly caCert!: pulumi.Output<string | undefined>;
    /**
     * A Synthetic Monitoring access token. May alternatively be set via the `GRAFANA_SM_ACCESS_TOKEN` environment variable.
     */
    public readonly smAccessToken!: pulumi.Output<string | undefined>;
    /**
     * Synthetic monitoring backend address. May alternatively be set via the `GRAFANA_SM_URL` environment variable.
     */
    public readonly smUrl!: pulumi.Output<string | undefined>;
    /**
     * Client TLS certificate file to use to authenticate to the Grafana server. May alternatively be set via the
     * `GRAFANA_TLS_CERT` environment variable.
     */
    public readonly tlsCert!: pulumi.Output<string | undefined>;
    /**
     * Client TLS key file to use to authenticate to the Grafana server. May alternatively be set via the `GRAFANA_TLS_KEY`
     * environment variable.
     */
    public readonly tlsKey!: pulumi.Output<string | undefined>;
    /**
     * The root URL of a Grafana server. May alternatively be set via the `GRAFANA_URL` environment variable.
     */
    public readonly url!: pulumi.Output<string | undefined>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            if ((!args || args.orgId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            resourceInputs["auth"] = (args ? args.auth : undefined) ?? utilities.getEnv("GRAFANA_AUTH");
            resourceInputs["caCert"] = args ? args.caCert : undefined;
            resourceInputs["insecureSkipVerify"] = pulumi.output(args ? args.insecureSkipVerify : undefined).apply(JSON.stringify);
            resourceInputs["orgId"] = pulumi.output(args ? args.orgId : undefined).apply(JSON.stringify);
            resourceInputs["retries"] = pulumi.output(args ? args.retries : undefined).apply(JSON.stringify);
            resourceInputs["smAccessToken"] = args ? args.smAccessToken : undefined;
            resourceInputs["smUrl"] = args ? args.smUrl : undefined;
            resourceInputs["tlsCert"] = args ? args.tlsCert : undefined;
            resourceInputs["tlsKey"] = args ? args.tlsKey : undefined;
            resourceInputs["url"] = (args ? args.url : undefined) ?? utilities.getEnv("GRAFANA_URL");
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Provider.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * API token or basic auth username:password. May alternatively be set via the `GRAFANA_AUTH` environment variable.
     */
    auth?: pulumi.Input<string>;
    /**
     * Certificate CA bundle to use to verify the Grafana server's certificate. May alternatively be set via the
     * `GRAFANA_CA_CERT` environment variable.
     */
    caCert?: pulumi.Input<string>;
    /**
     * Skip TLS certificate verification. May alternatively be set via the `GRAFANA_INSECURE_SKIP_VERIFY` environment variable.
     */
    insecureSkipVerify?: pulumi.Input<boolean>;
    /**
     * The organization id to operate on within grafana. May alternatively be set via the `GRAFANA_ORG_ID` environment
     * variable.
     */
    orgId: pulumi.Input<number>;
    /**
     * The amount of retries to use for Grafana API calls. May alternatively be set via the `GRAFANA_RETRIES` environment
     * variable.
     */
    retries?: pulumi.Input<number>;
    /**
     * A Synthetic Monitoring access token. May alternatively be set via the `GRAFANA_SM_ACCESS_TOKEN` environment variable.
     */
    smAccessToken?: pulumi.Input<string>;
    /**
     * Synthetic monitoring backend address. May alternatively be set via the `GRAFANA_SM_URL` environment variable.
     */
    smUrl?: pulumi.Input<string>;
    /**
     * Client TLS certificate file to use to authenticate to the Grafana server. May alternatively be set via the
     * `GRAFANA_TLS_CERT` environment variable.
     */
    tlsCert?: pulumi.Input<string>;
    /**
     * Client TLS key file to use to authenticate to the Grafana server. May alternatively be set via the `GRAFANA_TLS_KEY`
     * environment variable.
     */
    tlsKey?: pulumi.Input<string>;
    /**
     * The root URL of a Grafana server. May alternatively be set via the `GRAFANA_URL` environment variable.
     */
    url?: pulumi.Input<string>;
}
