// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./apiKey";
export * from "./builtinRoleAssignment";
export * from "./dashboard";
export * from "./dashboardPermission";
export * from "./dataSource";
export * from "./dataSourcePermission";
export * from "./folder";
export * from "./folderPermission";
export * from "./getFolder";
export * from "./getSynteticMonitoringProbe";
export * from "./getSynteticMonitoringProbes";
export * from "./getUser";
export * from "./organization";
export * from "./playlist";
export * from "./provider";
export * from "./role";
export * from "./synteticMonitoringCheck";
export * from "./synteticMonitoringProbe";
export * from "./team";
export * from "./teamExternalGroup";
export * from "./temPreferences";
export * from "./user";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { ApiKey } from "./apiKey";
import { BuiltinRoleAssignment } from "./builtinRoleAssignment";
import { Dashboard } from "./dashboard";
import { DashboardPermission } from "./dashboardPermission";
import { DataSource } from "./dataSource";
import { DataSourcePermission } from "./dataSourcePermission";
import { Folder } from "./folder";
import { FolderPermission } from "./folderPermission";
import { Organization } from "./organization";
import { Playlist } from "./playlist";
import { Role } from "./role";
import { SynteticMonitoringCheck } from "./synteticMonitoringCheck";
import { SynteticMonitoringProbe } from "./synteticMonitoringProbe";
import { Team } from "./team";
import { TeamExternalGroup } from "./teamExternalGroup";
import { TemPreferences } from "./temPreferences";
import { User } from "./user";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "grafana:/apiKey:ApiKey":
                return new ApiKey(name, <any>undefined, { urn })
            case "grafana:/builtinRoleAssignment:BuiltinRoleAssignment":
                return new BuiltinRoleAssignment(name, <any>undefined, { urn })
            case "grafana:/dashboard:Dashboard":
                return new Dashboard(name, <any>undefined, { urn })
            case "grafana:/dashboardPermission:DashboardPermission":
                return new DashboardPermission(name, <any>undefined, { urn })
            case "grafana:/dataSource:DataSource":
                return new DataSource(name, <any>undefined, { urn })
            case "grafana:/dataSourcePermission:DataSourcePermission":
                return new DataSourcePermission(name, <any>undefined, { urn })
            case "grafana:/folder:Folder":
                return new Folder(name, <any>undefined, { urn })
            case "grafana:/folderPermission:FolderPermission":
                return new FolderPermission(name, <any>undefined, { urn })
            case "grafana:/organization:Organization":
                return new Organization(name, <any>undefined, { urn })
            case "grafana:/playlist:Playlist":
                return new Playlist(name, <any>undefined, { urn })
            case "grafana:/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "grafana:/synteticMonitoringCheck:SynteticMonitoringCheck":
                return new SynteticMonitoringCheck(name, <any>undefined, { urn })
            case "grafana:/synteticMonitoringProbe:SynteticMonitoringProbe":
                return new SynteticMonitoringProbe(name, <any>undefined, { urn })
            case "grafana:/team:Team":
                return new Team(name, <any>undefined, { urn })
            case "grafana:/teamExternalGroup:TeamExternalGroup":
                return new TeamExternalGroup(name, <any>undefined, { urn })
            case "grafana:/temPreferences:TemPreferences":
                return new TemPreferences(name, <any>undefined, { urn })
            case "grafana:/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("grafana", "/apiKey", _module)
pulumi.runtime.registerResourceModule("grafana", "/builtinRoleAssignment", _module)
pulumi.runtime.registerResourceModule("grafana", "/dashboard", _module)
pulumi.runtime.registerResourceModule("grafana", "/dashboardPermission", _module)
pulumi.runtime.registerResourceModule("grafana", "/dataSource", _module)
pulumi.runtime.registerResourceModule("grafana", "/dataSourcePermission", _module)
pulumi.runtime.registerResourceModule("grafana", "/folder", _module)
pulumi.runtime.registerResourceModule("grafana", "/folderPermission", _module)
pulumi.runtime.registerResourceModule("grafana", "/organization", _module)
pulumi.runtime.registerResourceModule("grafana", "/playlist", _module)
pulumi.runtime.registerResourceModule("grafana", "/role", _module)
pulumi.runtime.registerResourceModule("grafana", "/synteticMonitoringCheck", _module)
pulumi.runtime.registerResourceModule("grafana", "/synteticMonitoringProbe", _module)
pulumi.runtime.registerResourceModule("grafana", "/team", _module)
pulumi.runtime.registerResourceModule("grafana", "/teamExternalGroup", _module)
pulumi.runtime.registerResourceModule("grafana", "/temPreferences", _module)
pulumi.runtime.registerResourceModule("grafana", "/user", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("grafana", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:grafana") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
